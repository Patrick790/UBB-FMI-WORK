        -:    0:Source:C:/Users/ardel/CLionProjects/lab2-4agentie/OfertaRepository.c
        -:    0:Graph:C:\Users\ardel\CLionProjects\lab2-4agentie\cmake-build-debug-coverage\CMakeFiles\lab2_4agentie.dir\OfertaRepository.c.gcno
        -:    0:Data:C:\Users\ardel\CLionProjects\lab2-4agentie\cmake-build-debug-coverage\CMakeFiles\lab2_4agentie.dir\OfertaRepository.c.gcda
        -:    0:Runs:1
        -:    1:#include "OfertaRepository.h"
        -:    2:#include "Oferta.h"
        -:    3:#include <stdio.h>
        -:    4:#include<string.h>
        -:    5:#include<stdlib.h>
        -:    6:#include<assert.h>
        -:    7:
function createRepo called 34 returned 100% blocks executed 80%
       34:    8:OfertaRepo* createRepo()
        -:    9:{
        -:   10:    //Creeare repository
        -:   11:
       34:   12:    OfertaRepo* r = (OfertaRepo*)malloc(sizeof(OfertaRepo));
       34:   13:    if (r == NULL)
       34:   13-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 34
        -:   14:    {
    #####:   15:        return NULL;
    %%%%%:   15-block  0
        -:   16:    }
       34:   17:    r->oferte = createVector(2, (DestroyElementFunctionType) destroyOferta);
       34:   17-block  0
call    0 returned 34
       34:   18:    return r;
        -:   19:}
        -:   20:
function destroyRepo called 33 returned 100% blocks executed 100%
       33:   21:void destroyRepo(OfertaRepo* r)
        -:   22:{
        -:   23:    //Distrugere repository - eliberare memorie
        -:   24:
       33:   25:    if (r == NULL)
       33:   25-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 32
        -:   26:    {
        1:   27:        return;
        1:   27-block  0
        -:   28:    }
        -:   29:
       32:   30:    destroyVector(r->oferte);
       32:   30-block  0
call    0 returned 32
       32:   31:    free(r);
        -:   32:}
        -:   33:
function getLength called 27 returned 100% blocks executed 100%
       27:   34:int getLength(OfertaRepo* r)
        -:   35:{
        -:   36:    //Returneaza lungimea repository-ului (int)
        -:   37:
       27:   38:    return getVectorLength(r->oferte);
       27:   38-block  0
call    0 returned 27
        -:   39:}
        -:   40:
function add called 37 returned 100% blocks executed 100%
       37:   41:int add(OfertaRepo* r, Oferta* o)
        -:   42:{
        -:   43:    // Adauga o oferta
        -:   44:    //:param: oferta (Oferta*)
        -:   45:    //:return: -1/1 (not ok, ok)
        -:   46:
       37:   47:    if (r == NULL || o == NULL)
       37:   47-block  0
branch  0 taken 37 (fallthrough)
branch  1 taken 0
       37:   47-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 36
        -:   48:    {
        1:   49:        return -1;
        1:   49-block  0
        -:   50:    }
       36:   51:    addTElement(r->oferte, o);
       36:   51-block  0
call    0 returned 36
        -:   52:
       36:   53:    return 1;
        -:   54:}
        -:   55:
function deleteO called 5 returned 100% blocks executed 100%
        5:   56:int deleteO(OfertaRepo* r, int nr)
        -:   57:{
        -:   58:    // Sterge o oferta
        -:   59:    //:param: nr(int)
        -:   60:    //return 0/1 (not ok/ok)
        -:   61:
        5:   62:    if (nr < 0 || nr >= getVectorLength(r->oferte))
        5:   62-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5:   62-block  1
call    2 returned 5
branch  3 taken 2 (fallthrough)
branch  4 taken 3
        -:   63:    {
        2:   64:        return 0;
        2:   64-block  0
        -:   65:    }
        3:   66:    deleteTElement(r->oferte, nr);
        3:   66-block  0
call    0 returned 3
        3:   67:    return 1;
        -:   68:}
        -:   69:
function modifyO called 5 returned 100% blocks executed 100%
        5:   70:int modifyO(OfertaRepo* r, int nr,int pret)
        -:   71:{
        -:   72:    //Modifica o oferta
        -:   73:    //:param: nr(int)
        -:   74:    //:param: pret(int)
        -:   75:    //return 0/1 (not ok/ ok)
        -:   76:
        5:   77:    if (nr < 0 || nr >= getVectorLength(r->oferte))
        5:   77-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5:   77-block  1
call    2 returned 5
branch  3 taken 2 (fallthrough)
branch  4 taken 3
        -:   78:    {
        2:   79:        return 0;
        2:   79-block  0
        -:   80:    }
        -:   81:
        3:   82:    setPret(get(r->oferte, nr), pret);
        3:   82-block  0
call    0 returned 3
call    1 returned 3
        3:   83:    return 1;
        -:   84:}
        -:   85:
function getOfertaOnPos called 14 returned 100% blocks executed 100%
       14:   86:Oferta* getOfertaOnPos(OfertaRepo* v, int pos)
        -:   87:{
        -:   88:    //Retureaza o oferta in functie de o pozitie
        -:   89:    //:param: pos(int)
        -:   90:    //:return oferta(Oferta*)
        -:   91:
       14:   92:    if (v == NULL)
       14:   92-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 13
        -:   93:    {
        1:   94:        return NULL;
        1:   94-block  0
        -:   95:    }
       13:   96:    if (pos < 0 || pos >= getVectorLength(v->oferte))
       13:   96-block  0
branch  0 taken 13 (fallthrough)
branch  1 taken 0
       13:   96-block  1
call    2 returned 13
branch  3 taken 2 (fallthrough)
branch  4 taken 11
        -:   97:    {
        2:   98:        return NULL;
        2:   98-block  0
        -:   99:    }
       11:  100:    return get(v->oferte,pos);
       11:  100-block  0
call    0 returned 11
        -:  101:}
        -:  102:
function filterbypretRepo called 1 returned 100% blocks executed 100%
        1:  103:OfertaRepo* filterbypretRepo(OfertaRepo* r, int pret)
        -:  104:{
        -:  105:    //Returneaza un nou repoistory cu oferte care au un anumit pret
        -:  106:    //:param: pret (int)
        -:  107:    //:return: ^un repository (OfertaRepo*)
        -:  108:
        1:  109:    OfertaRepo* repo_nou = createRepo();
        1:  109-block  0
call    0 returned 1
        -:  110:
        3:  111:    for (int i = 0; i < getLength(r); i++)
        2:  111-block  0
        3:  111-block  1
call    0 returned 3
branch  1 taken 2
branch  2 taken 1 (fallthrough)
        -:  112:    {
        2:  113:        Oferta* oferta = getOfertaOnPos(r, i);
        2:  113-block  0
call    0 returned 2
        2:  114:        if (getPret(oferta) == pret)
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        -:  115:        {
        1:  116:            add(repo_nou, copyO(oferta));
        1:  116-block  0
call    0 returned 1
call    1 returned 1
        -:  117:        }
        -:  118:    }
        1:  119:    return repo_nou;
        1:  119-block  0
        -:  120:}
        -:  121:
function filterbydataRepo called 1 returned 100% blocks executed 100%
        1:  122:OfertaRepo* filterbydataRepo(OfertaRepo* r, char* data) {
        -:  123:
        1:  124:    OfertaRepo* repo_nou = createRepo();
        1:  124-block  0
call    0 returned 1
        -:  125:
        3:  126:    for (int i = 0; i < getLength(r); i++)
        2:  126-block  0
        3:  126-block  1
call    0 returned 3
branch  1 taken 2
branch  2 taken 1 (fallthrough)
        -:  127:    {
        2:  128:        Oferta* oferta = getOfertaOnPos(r, i);
        2:  128-block  0
call    0 returned 2
        2:  129:        if (!strcmp(getData(oferta), data))
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
        -:  130:        {
        2:  131:            add(repo_nou, copyO(oferta));
        2:  131-block  0
call    0 returned 2
call    1 returned 2
        -:  132:        }
        -:  133:    }
        1:  134:    return repo_nou;
        1:  134-block  0
        -:  135:}
        -:  136:
function filterbytipRepo called 1 returned 100% blocks executed 100%
        1:  137:OfertaRepo* filterbytipRepo(OfertaRepo* r, char* tip)
        -:  138:{
        -:  139:    //Returneaza un nou repository cu oferte care au un anumit tip
        -:  140:    //:param: tip (char*)
        -:  141:    //:return: ^un repository (OfertaRepo*)
        -:  142:
        1:  143:    OfertaRepo* repo_nou = createRepo();
        1:  143-block  0
call    0 returned 1
        -:  144:
        3:  145:    for (int i = 0; i < getLength(r); i++)
        2:  145-block  0
        3:  145-block  1
call    0 returned 3
branch  1 taken 2
branch  2 taken 1 (fallthrough)
        -:  146:    {
        2:  147:        Oferta* oferta = getOfertaOnPos(r, i);
        2:  147-block  0
call    0 returned 2
        2:  148:        if (strcmp(tip, getTip(oferta)) == 0)
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
        -:  149:        {
        2:  150:            add(repo_nou, copyO(oferta));
        2:  150-block  0
call    0 returned 2
call    1 returned 2
        -:  151:        }
        -:  152:    }
        1:  153:    return repo_nou;
        1:  153-block  0
        -:  154:}
        -:  155:
function filterbydestinatieRepo called 1 returned 100% blocks executed 100%
        1:  156:OfertaRepo* filterbydestinatieRepo(OfertaRepo* r, char* destinatie)
        -:  157:{
        -:  158:    //Returneaza un nou repository cu oferte care au o anumita destinatie
        -:  159:    //:param: destinatie (char*)
        -:  160:    //:return: ^un repository (OfertaRepo*)
        1:  161:    OfertaRepo* repo_nou = createRepo();
        1:  161-block  0
call    0 returned 1
        -:  162:
        3:  163:    for (int i = 0; i < getLength(r); i++)
        2:  163-block  0
        3:  163-block  1
call    0 returned 3
branch  1 taken 2
branch  2 taken 1 (fallthrough)
        -:  164:    {
        2:  165:        Oferta* oferta = getOfertaOnPos(r, i);
        2:  165-block  0
call    0 returned 2
        2:  166:        if (strcmp(destinatie, getDestinatie(oferta)) == 0)
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        -:  167:        {
        1:  168:            add(repo_nou, copyO(oferta));
        1:  168-block  0
call    0 returned 1
call    1 returned 1
        -:  169:        }
        -:  170:    }
        1:  171:    return repo_nou;
        1:  171-block  0
        -:  172:}
        -:  173:
function filterbytotRepo called 1 returned 100% blocks executed 100%
        1:  174:OfertaRepo* filterbytotRepo(OfertaRepo* r, char* destinatie, int pret) {
        1:  175:    OfertaRepo* repo_nou = createRepo();
        1:  175-block  0
call    0 returned 1
        3:  176:    for (int i = 0; i < getLength(r); i++)
        2:  176-block  0
        3:  176-block  1
call    0 returned 3
branch  1 taken 2
branch  2 taken 1 (fallthrough)
        -:  177:    {
        2:  178:        Oferta* oferta = getOfertaOnPos(r, i);
        2:  178-block  0
call    0 returned 2
        2:  179:        if (strcmp(destinatie, getDestinatie(oferta)) == 0 && getPret(oferta) <= pret)
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1:  179-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        -:  180:        {
        1:  181:            add(repo_nou, copyO(oferta));
        1:  181-block  0
call    0 returned 1
call    1 returned 1
        -:  182:        }
        -:  183:    }
        1:  184:    return repo_nou;
        1:  184-block  0
        -:  185:}
        -:  186:
function compararedestinatie called 2 returned 100% blocks executed 100%
        2:  187:int compararedestinatie(Oferta* o1, Oferta* o2)
        -:  188:{
        -:  189:    //Compara cele 2 oferte dupa destinatie
        -:  190:    //:return: 1 daca dest de la oferta1 > dest de la oferta2, 0 altfel
        -:  191:
        2:  192:    if (strcmp(getDestinatie(o1), getDestinatie(o2)) > 0)
        2:  192-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        -:  193:    {
        1:  194:        return 1;
        1:  194-block  0
        -:  195:    }
        1:  196:    return 0;
        1:  196-block  0
        -:  197:}
        -:  198:
function compararepret called 2 returned 100% blocks executed 100%
        2:  199:int compararepret(Oferta* o1, Oferta* o2)
        -:  200:{
        -:  201:    //Compara cele 2 oferte dupa pret
        -:  202:
        2:  203:    if (getPret(o1) > getPret(o2))
        2:  203-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        -:  204:    {
        1:  205:        return 1;
        1:  205-block  0
        -:  206:    }
        1:  207:    return 0;
        1:  207-block  0
        -:  208:}
function sort called 2 returned 100% blocks executed 100%
        2:  209:OfertaRepo* sort(OfertaRepo* r, int (*cmp)(Oferta* o1, Oferta* o2))
        -:  210:{
        -:  211:
        -:  212:    //Returneaza un repository nou sortat dupa destinatie
        -:  213:    //:return: ^un repository (OfertaRepo*)
        -:  214:
        2:  215:    OfertaRepo* repo_nou = createRepo();
        2:  215-block  0
call    0 returned 2
        2:  216:    int len = getLength(r);
call    0 returned 2
        -:  217:
        6:  218:    for (int i = 0; i < len; i++)
        6:  218-block  0
branch  0 taken 4
branch  1 taken 2 (fallthrough)
        -:  219:    {
        4:  220:        add(repo_nou, copyO(get(r->oferte, i)));
        4:  220-block  0
call    0 returned 4
call    1 returned 4
call    2 returned 4
        -:  221:    }
        2:  222:    int ok = 0;
        6:  223:    while (ok == 0)
        2:  223-block  0
        6:  223-block  1
branch  0 taken 4
branch  1 taken 2 (fallthrough)
        -:  224:    {
        4:  225:        ok = 1;
        8:  226:        for (int i = 0; i < len - 1; i++)
        4:  226-block  0
        4:  226-block  1
        8:  226-block  2
branch  0 taken 4
branch  1 taken 4 (fallthrough)
        -:  227:        {
        4:  228:            Oferta* st = get(repo_nou->oferte, i);
        4:  228-block  0
call    0 returned 4
        4:  229:            Oferta* dr = get(repo_nou->oferte, i + 1);
call    0 returned 4
        4:  230:            if (cmp(st,dr))
call    0 returned 4
branch  1 taken 2 (fallthrough)
branch  2 taken 2
        -:  231:            {
        2:  232:                swapTElemets(repo_nou->oferte, i, i + 1);
        2:  232-block  0
call    0 returned 2
        2:  233:                ok = 0;
        -:  234:            }
        -:  235:        }
        -:  236:    }
        2:  237:    return(repo_nou);
        2:  237-block  0
        -:  238:
        -:  239:}
        -:  240:
function copyOfertaRepo called 13 returned 100% blocks executed 100%
       13:  241:OfertaRepo* copyOfertaRepo(OfertaRepo* r) {
       13:  242:    OfertaRepo* copy = createRepo();
       13:  242-block  0
call    0 returned 13
       13:  243:    int i = 0;
       38:  244:    for (; i < r->oferte->length; i++)
       38:  244-block  0
branch  0 taken 25
branch  1 taken 13 (fallthrough)
       25:  245:        addTElement(copy->oferte, copyO(r->oferte->elems[i]));
       25:  245-block  0
call    0 returned 25
call    1 returned 25
       13:  246:    copy->oferte->destroyElemFct = r->oferte->destroyElemFct;
       13:  247:    return copy;
       13:  247-block  0
        -:  248:}
        -:  249:
        -:  250:
function undo called 8 returned 100% blocks executed 100%
        8:  251:OfertaRepo* undo(OfertaRepo* r, Vector* undoList) {
        8:  252:    if (undoList->length > 1) {
        8:  252-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 4
        4:  253:        OfertaRepo* l = copyOfertaRepo(undoList->elems[undoList->length - 2]);
        4:  253-block  0
call    0 returned 4
        4:  254:        deleteTElement(undoList, undoList->length - 1);
call    0 returned 4
        4:  255:        destroyRepo(r);
call    0 returned 4
        4:  256:        return l;
        -:  257:    }
        4:  258:    return r;
        4:  258-block  0
        -:  259:}
        -:  260:
        -:  261:///---------------------TESTS------------------
        -:  262:
function testgetOpos called 1 returned 100% blocks executed 68%
        1:  263:void testgetOpos()
        -:  264:{
        1:  265:    OfertaRepo* tr = createRepo();
        1:  265-block  0
call    0 returned 1
        1:  266:    Oferta* o = createOferta("munte", "Fagaras", "1/1/2021", 200);
call    0 returned 1
        1:  267:    add(tr, o);
call    0 returned 1
        1:  268:    o = getOfertaOnPos(tr, 0);
call    0 returned 1
       1*:  269:    assert(o->pret == 200);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  269-block  0
call    2 never executed
        1:  269-block  1
       1*:  270:    assert(getOfertaOnPos(tr, 10) == NULL);
        1:  270-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  270-block  1
call    3 never executed
        1:  270-block  2
       1*:  271:    assert(getOfertaOnPos(tr, 20) == NULL);
        1:  271-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  271-block  1
call    3 never executed
        1:  271-block  2
       1*:  272:    assert(getOfertaOnPos(NULL, 10) == NULL);
        1:  272-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  272-block  1
call    3 never executed
        1:  272-block  2
        1:  273:    destroyRepo(tr);
        1:  273-block  0
call    0 returned 1
        1:  274:}
        -:  275:
function testadd called 1 returned 100% blocks executed 68%
        1:  276:void testadd()
        -:  277:{
        1:  278:    OfertaRepo* tr = createRepo();
        1:  278-block  0
call    0 returned 1
        1:  279:    Oferta* o = createOferta("munte", "Fagaras", "1/1/2021", 200);
call    0 returned 1
        1:  280:    add(tr, o);
call    0 returned 1
       1*:  281:    assert(getLength(tr)== 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  281-block  0
call    3 never executed
        1:  281-block  1
        1:  282:    o = createOferta("mare", "Marea Neagra", "1/1/2020", 300);
        1:  282-block  0
call    0 returned 1
       1*:  283:    assert(add(tr, o) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  283-block  0
call    3 never executed
        1:  283-block  1
       1*:  284:    assert(getLength(tr) == 2);
        1:  284-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  284-block  1
call    3 never executed
        1:  284-block  2
       1*:  285:    assert(getLength(tr) != 3);
        1:  285-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  285-block  1
call    3 never executed
        1:  285-block  2
       1*:  286:    assert(add(tr, NULL) == -1);
        1:  286-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  286-block  1
call    3 never executed
        1:  286-block  2
        1:  287:    destroyRepo(tr);
        1:  287-block  0
call    0 returned 1
        1:  288:}
        -:  289:
function testdelete called 1 returned 100% blocks executed 65%
        1:  290:void testdelete()
        -:  291:{
        1:  292:    OfertaRepo* tr = createRepo();
        1:  292-block  0
call    0 returned 1
        1:  293:    Oferta* o = createOferta("munte", "Fagaras", "1/1/2021", 200);
call    0 returned 1
        1:  294:    add(tr, o);
call    0 returned 1
       1*:  295:    assert(getLength(tr) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  295-block  0
call    3 never executed
        1:  295-block  1
        1:  296:    o = createOferta("mare", "Marea Neagra", "1/1/2020", 300);
        1:  296-block  0
call    0 returned 1
       1*:  297:    assert(add(tr, o) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  297-block  0
call    3 never executed
        1:  297-block  1
       1*:  298:    assert(getLength(tr) == 2);
        1:  298-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  298-block  1
call    3 never executed
        1:  298-block  2
        -:  299:
       1*:  300:    assert(deleteO(tr, 0) == 1);
        1:  300-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  300-block  1
call    3 never executed
        1:  300-block  2
       1*:  301:    assert(deleteO(tr, 100) == 0);
        1:  301-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  301-block  1
call    3 never executed
        1:  301-block  2
       1*:  302:    assert(getLength(tr) == 1);
        1:  302-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  302-block  1
call    3 never executed
        1:  302-block  2
        -:  303:
       1*:  304:    assert(deleteO(tr, 0) == 1);
        1:  304-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  304-block  1
call    3 never executed
        1:  304-block  2
       1*:  305:    assert(deleteO(tr, 100) == 0);
        1:  305-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  305-block  1
call    3 never executed
        1:  305-block  2
       1*:  306:    assert(getLength(tr) == 0);
        1:  306-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  306-block  1
call    3 never executed
        1:  306-block  2
        -:  307:
        1:  308:    destroyRepo(tr);
        1:  308-block  0
call    0 returned 1
        -:  309:
        1:  310:    destroyRepo(NULL);
call    0 returned 1
        1:  311:}
        -:  312:
function testmodify called 1 returned 100% blocks executed 66%
        1:  313:void testmodify()
        -:  314:{
        1:  315:    OfertaRepo* tr = createRepo();
        1:  315-block  0
call    0 returned 1
        1:  316:    Oferta* o = createOferta("munte", "Fagaras", "1/1/2021", 200);
call    0 returned 1
        1:  317:    add(tr, o);
call    0 returned 1
       1*:  318:    assert(getLength(tr) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  318-block  0
call    3 never executed
        1:  318-block  1
        1:  319:    o = createOferta("mare", "Marea Neagra", "1/1/2020", 300);
        1:  319-block  0
call    0 returned 1
       1*:  320:    assert(add(tr, o) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  320-block  0
call    3 never executed
        1:  320-block  1
       1*:  321:    assert(getLength(tr) == 2);
        1:  321-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  321-block  1
call    3 never executed
        1:  321-block  2
        -:  322:
       1*:  323:    assert(modifyO(tr, 0, 100) == 1);
        1:  323-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  323-block  1
call    3 never executed
        1:  323-block  2
       1*:  324:    assert(modifyO(tr, 100, 100) == 0);
        1:  324-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  324-block  1
call    3 never executed
        1:  324-block  2
        -:  325:
       1*:  326:    assert(modifyO(tr, 0, 200) == 1);
        1:  326-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  326-block  1
call    3 never executed
        1:  326-block  2
       1*:  327:    assert(modifyO(tr, 200, 100) == 0);
        1:  327-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  327-block  1
call    3 never executed
        1:  327-block  2
        1:  328:    destroyRepo(tr);
        1:  328-block  0
call    0 returned 1
        1:  329:}
        -:  330:
function test_copyOfertaRepo called 1 returned 100% blocks executed 100%
        1:  331:void test_copyOfertaRepo() {
        1:  332:    OfertaRepo* repo1 = createRepo();
        1:  332-block  0
call    0 returned 1
        1:  333:    OfertaRepo* repo = copyOfertaRepo(repo1);
call    0 returned 1
        -:  334:
        -:  335:    assert(repo->oferte->length == repo->oferte->length);
        -:  336:    assert(repo->oferte->capacity == repo->oferte->capacity);
        -:  337:    assert(repo->oferte->destroyElemFct == repo->oferte->destroyElemFct);
        -:  338:
        1:  339:    destroyRepo(repo);
call    0 returned 1
        1:  340:    destroyRepo(repo1);
call    0 returned 1
        1:  341:}
        -:  342:
function test_undo called 1 returned 100% blocks executed 67%
        1:  343:void test_undo() {
        1:  344:    Vector* undoList_t = createVector(2, (DestroyElementFunctionType) destroyRepo);
        1:  344-block  0
call    0 returned 1
        1:  345:    OfertaRepo* repo = createRepo();
call    0 returned 1
        -:  346:
        1:  347:    add(repo, createOferta("munte", "Fagaras", "20/10/2020", 200));
call    0 returned 1
call    1 returned 1
        1:  348:    addTElement(undoList_t, copyOfertaRepo(repo));
call    0 returned 1
call    1 returned 1
        1:  349:    add(repo, createOferta("mare", "Marea Neagra", "10/10/2020", 600));
call    0 returned 1
call    1 returned 1
        1:  350:    addTElement(undoList_t, copyOfertaRepo(repo));
call    0 returned 1
call    1 returned 1
        1:  351:    add(repo, createOferta("munte", "Brasov", "1/3/2019", 400));
call    0 returned 1
call    1 returned 1
        1:  352:    addTElement(undoList_t, copyOfertaRepo(repo));
call    0 returned 1
call    1 returned 1
        -:  353:
       1*:  354:    assert(undoList_t->length == 3);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  354-block  0
call    2 never executed
        1:  354-block  1
       1*:  355:    assert(repo->oferte->length == 3);
        1:  355-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  355-block  1
call    2 never executed
        1:  355-block  2
        1:  356:    repo = undo(repo, undoList_t);
        1:  356-block  0
call    0 returned 1
       1*:  357:    assert(repo->oferte->length == 2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  357-block  0
call    2 never executed
        1:  357-block  1
       1*:  358:    assert(undoList_t->length == 2);
        1:  358-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  358-block  1
call    2 never executed
        1:  358-block  2
        1:  359:    repo = undo(repo, undoList_t);
        1:  359-block  0
call    0 returned 1
       1*:  360:    assert(repo->oferte->length == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  360-block  0
call    2 never executed
        1:  360-block  1
       1*:  361:    assert(undoList_t->length == 1);
        1:  361-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  361-block  1
call    2 never executed
        1:  361-block  2
        1:  362:    repo = undo(repo, undoList_t);
        1:  362-block  0
call    0 returned 1
       1*:  363:    assert(repo->oferte->length == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  363-block  0
call    2 never executed
        1:  363-block  1
       1*:  364:    assert(undoList_t->length == 1);
        1:  364-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  364-block  1
call    2 never executed
        1:  364-block  2
        1:  365:    repo = undo(repo, undoList_t);
        1:  365-block  0
call    0 returned 1
       1*:  366:    assert(repo->oferte->length == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  366-block  0
call    2 never executed
        1:  366-block  1
       1*:  367:    assert(undoList_t->length == 1);
        1:  367-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  367-block  1
call    2 never executed
        1:  367-block  2
        -:  368:
        1:  369:    destroyRepo(repo);
        1:  369-block  0
call    0 returned 1
        1:  370:    destroyVector(undoList_t);
call    0 returned 1
        1:  371:}
        -:  372:
function testsrepo called 1 returned 100% blocks executed 100%
        1:  373:void testsrepo() {
        1:  374:    testadd();
        1:  374-block  0
call    0 returned 1
        1:  375:    testdelete();
call    0 returned 1
        1:  376:    testmodify();
call    0 returned 1
        1:  377:    testgetOpos();
call    0 returned 1
        1:  378:    test_copyOfertaRepo();
call    0 returned 1
        1:  379:    test_undo();
call    0 returned 1
        1:  380:}
